# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ayr-Tw4yrQi9j1Ck5D21Em3qeKoNcUBP
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import MaxAbsScaler

# data processing

num_features = 4
num_targets = 1

df = pd.read_csv("/content/QSTP_LinReg.csv")
scaler=MaxAbsScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)

y = df_scaled['PE'].values
X = df_scaled.drop(['PE'],axis=1).values

train_X, test_X, train_y, test_y = train_test_split(X, y, 
                                                    test_size=0.2, 
                                                    random_state=0)

# scikit model

regressor = LinearRegression(fit_intercept=True)
model = regressor.fit(train_X,train_y)
prediction = model.predict(test_X)
r2_score(test_y,prediction)

# numpy model

class GradientDescentLinearRegression:

  def __init__(self, num_targets, num_features, learning_rate, epochs):
    self.num_features = num_features
    self.num_targets = num_targets 
    self.learning_rate = learning_rate
    self.epochs = epochs
  
  def fit(self, X, y):
    n = X.shape[0]
    np.random.seed(0)
    self.W = np.random.normal(size=(self.num_targets, self.num_features))
    self.b = np.random.normal(size=(self.num_targets, 1))
    for epoch in range(self.epochs):
      for i in range(n):
        X_i, y_i = X[i].reshape(-1, 1), y[i].reshape(-1, 1)
        y_hat = np.dot(self.W, X_i) + self.b
        
        dL_dy = 2*(y_hat-y_i)
        dy_dW = X_i
        dy_db = 1
    
        dL_dW = np.dot(dL_dy, dy_dW.T)
        dL_db = dL_dy * dy_db
    
        self.W -= self.learning_rate * dL_dW
        self.b -= self.learning_rate * dL_db
      
  def predict(self, X):
    return np.array([np.dot(self.W, X_i) + self.b for X_i in X]).squeeze()

learning_rate =   0.001  
epochs = 500 

regressor = GradientDescentLinearRegression(num_targets=1,
                                            num_features=4,
                                            epochs=epochs,
                                            learning_rate=learning_rate)
regressor.fit(train_X, train_y)

prediction = regressor.predict(test_X)
r2_score(test_y,prediction)